@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager NavMgr
<h3 style="text-align: center">Overview of all posts</h3>

@if (!string.IsNullOrEmpty(msg))
{
    <div>
        <span>@msg</span>
    </div>
}

@if (posts == null)
{
    <span>Loading..</span>
}
else if (!posts.Any())
{
    <span>No posts to be found</span>
}
else
{
    <div class="posts-container">
        @foreach (Post post in posts)
        {
            <div class="posting">
                <h3> <b> @post.PostTitle </b></h3>
                <br>
                <div> By  @post.Poster.UserName </div>
                <br>
                <div> @post.PostBody  </div>
                <br>
                <AuthorizeView Policy="MustBeAdmin"> <!-- policy that requires admin can only delete-->
                    <button @onclick="@(() => RemovePost(post.Id))" style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </button>
                </AuthorizeView>
            </div>
            <div>                                                                  
                <br>
            </div>
        }
    </div>
}


@code {
    private IEnumerable<Post>? posts;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            posts = await postService.GetPosts();
            int stpher = 0;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemovePost(int postId)
    {
        msg = "";
        try
        {
            await postService.DeleteAsync(postId: postId);

            var list = new List<Post>(posts!);
            list.RemoveAll(post => post.Id == postId);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }



}