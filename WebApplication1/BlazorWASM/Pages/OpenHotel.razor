@page "/OpenHotel/{cityid:int}/{id:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using SEP3lu
@using System.Security.Claims
@using Domain.DTOs
@inject IHotelsReviewService HotelsReviewService;
@inject IHotelService HotelService
@inject NavigationManager NavMgr

<button @onclick="@((() => NavMgr.NavigateTo($"/OpenCityHotels/{cityid}")))" class="acceptbtn">Go back</button>
<h3 class="heading"><b>@theName</b></h3>
<img class="photo" src=@imgurl height=80% width=80%/>
<div>
    <p class="description">@desc</p>
</div>

<h3><b>Comments</b></h3>

@if (reviews == null)
{
    <span>Loading..</span>
}
else if (!reviews.Any())
{
    <span>No reviews found</span>
}
else
{
    <div class="users-container">
        @foreach (Review review in reviews)
        {
            <div class="container">
                <p>@review.Comment</p>
                <AuthorizeView Policy="MustBeAdmin"> <!-- policy that requires admin can only delete-->
                    <button @onclick="@(() => RemoveComment(review.Id))" style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </button>
                </AuthorizeView>
                @if (@review.StarReview == 1)
                                    {
                                        <div>&#11088;</div>
                                    }
                                    else if (@review.StarReview==2)
                                    {
                                        <div>&#11088;&#11088;</div>
                                    }
                                    else if (@review.StarReview==3)
                                    {
                                        <div>&#11088;&#11088;&#11088;</div>                   
                                    }
                                    else if (@review.StarReview==4)
                                    {
                                        <div>&#11088;&#11088;&#11088;&#11088;</div>                 
                                    }
                                    else if (@review.StarReview==5)
                                    {
                                        <div>&#11088;&#11088;&#11088;&#11088;&#11088;</div>              
                                    }
            </div>
 
        }
    </div>
}
<AuthorizeView>
    <Authorized>
        <div>
                <label>Comment</label>
                <input type="text" @bind="comment" @bind:event="oninput"/>
            </div>
            <div class="button-row">
                <button @onclick="Create" class="acceptbtn">Create</button>
                <br/>
                <button @onclick="SelectStar1">star1</button>
                <button @onclick="SelectStar2">star2</button>
                <button @onclick="SelectStar3">star3</button>
                <button @onclick="SelectStar4">star4</button>
                <button @onclick="SelectStar5">star5</button>
            </div>
    </Authorized>
    <NotAuthorized>
        <div>
            <p>Log in or create an account in order to leave a review :D</p>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public int cityid { get; set; }
    [Parameter]
    public int id { get; set; }
    private IEnumerable<Review> reviews;
    private IEnumerable<Hotel> hotels; 
    private Hotel theHotel;
    private string theName;
    private string desc;
    private string imgurl;
    private Review theReview;

    private string comment;
    private int starreview=1;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    
    private string stringselectedUserId;
    private int? selectedUserId;
    private int userId;
    

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reviews = await HotelsReviewService.getHotelsReviews(id);
            hotels = await HotelService.getHotels(cityid);
            theHotel = hotels.FirstOrDefault(hotel => hotel.Id == id);
            theName = theHotel.Name;
            desc = theHotel.Description;
            imgurl = theHotel.ImageURL;
    /*
            theReview = reviews.FirstOrDefault(review => review.CategoryId == id);
            comment = theReview.Comment;
            starreview = theReview.StarReview;
            */
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            isLoggedIn = user.Identity != null;
        
            if (!isLoggedIn) return;
        
            userClaims = user.Claims;
        
            stringselectedUserId = user.Claims.First(claim => claim.Type.Equals("Id")).ToString(); 

            string stringid="";
            foreach (char VARIABLE in stringselectedUserId)
            {
                if (Char.IsDigit(VARIABLE))
                {
                    stringid = stringid + VARIABLE;
                }
            }

            selectedUserId = Convert.ToInt32(stringid);
            userId = (int)selectedUserId;

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private async Task Create()
    {
        try
        {
            await HotelsReviewService.CreateReview(new ReviewCreationDto(comment, starreview, userId, id));
            reviews = await HotelsReviewService.getHotelsReviews(id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);

            throw;
        }
    }

    private async Task SelectStar1()
    {
        starreview = 1;
    }
    private async Task SelectStar2()
    {
        starreview = 2;
    }
    private async Task SelectStar3()
    {
        starreview = 3;
    }
    private async Task SelectStar4()
    {
        starreview = 4;
    }
    private async Task SelectStar5()
    {
        starreview = 5;
    }

    private async Task RemoveComment(int id)
    {
        
        try
        {
            await HotelsReviewService.DeleteHotelReview(id);

            var list = new List<Review>(reviews);
            list.RemoveAll(post => post.Id == id);
            reviews= list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            
        }
    }

    
    
    
    
}

<style>
            .column {
              float: left;
              width: 25%;
              font-size: 22px;
            }
            
            /* Clear floats after the columns */
            .row:after {
              content: "";
              display: table;
              clear: both;
            }
            
            .heading{
            text-align: center;
            }
            
            .description{
            /*text-align: center;*/
            font-size: 1.5em;
           /* color: #505050;*/
            padding: 20px;
            /*background-color: #f1f1f1;*/
            border-radius: 10px;
            }
            
            .photo{
              display: block;
              margin-left: auto;
              margin-right: auto;
              width: 50%;
            }
            
            .container {
              position: relative;
              text-align: center;
              color: #000000;
              border-bottom: 2px solid black;
              
            }
           
        </style>